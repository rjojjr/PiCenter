{"version":3,"sources":["comps/global/LoadingView.js","services/axios-service.js","constants/page-constants.js","actions/logon-actions.js","actions/universal-actions.js","comps/login/LogOnPage.js","comps/login/LogOnPageContainer.js","actions/summary-actions.js","comps/summary/SummaryTableRows.js","comps/summary/SummaryPage.js","comps/summary/SummaryPageHeader.js","comps/summary/SummaryPageContainer.js","comps/summary/SummaryPageLoader.js","comps/PageSelector.js","comps/AppContainer.js","comps/InitialAppLoader.js","actions/loader-actions.js","reducers/main-reducer.js","App.js","serviceWorker.js","index.js"],"names":["LoadingView","isLoading","message","className","loadSummary","user","token","axios","get","constants","logOn","username","password","LogonForm","post","logonError","msg","type","isLoggedOn","setUser","loggedOn","logOff","dispatch","a","response","data","restUser","logout","LogOnPage","isShowMsg","resetIsShowMsg","isLoggingOn","useState","setUsername","setPassword","undefined","onChange","e","target","value","onClick","mapDispatchToProps","userName","responseBody","body","connect","state","id","href","summaryCanRender","canRender","SummaryTableRows","summary","interval","index","temps","humiditys","tempDevi","humidityDevi","SummaryPage","roomName","map","SummaryPageHeader","selectSensor","sum","key","SummaryPageContainer","isError","errorMsg","canLoad","sensorIndex","setSensorIndex","length","summaryResponse","isSummaryLoading","isSummaryError","canRenderSummary","PageSelector","page","loadApp","initiationResponse","useEffect","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","isLoadingError","loadingErrorMsg","loaded","action","applyMiddleware","thunk","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.418f9567.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst LoadingView = ({ isLoading , message }) => {\r\n  return <div>{isLoading && <p className={\"message\"}>{message}</p>}</div>;\r\n};\r\nexport default LoadingView;\r\n","import axios from \"axios\";\r\nimport * as constants from \"../constants/page-constants\";\r\n\r\n/*const getEndpoint = endpoint => {\r\n  return process.env.NODE_ENV === \"development\" ||\r\n    process.env.NODE_ENV === \"test\"\r\n    ? `http://192.168.1.25:7733${endpoint}`\r\n    : endpoint;\r\n};*/\r\n\r\nexport const load = () => axios.get(constants.LOADING_PAGE);\r\n\r\nexport const loadSummary = (user) => {\r\n  const params = {\r\n    userId: user.token\r\n  }\r\n  return axios.get(constants.SUMMARY_PAGE + '?userId=' + user.token);\r\n} \r\n\r\nexport const logOn = (username, password) => {\r\n  const LogonForm = {\r\n    username: username,\r\n    password: password\r\n  };\r\n\r\n  return axios.post(constants.LOGIN_PAGE, LogonForm);\r\n};\r\n\r\nexport const logOut = () => {\r\n  return axios.get(constants.LOGOUT);\r\n}\r\n","export const LOADING_PAGE = '/loading';\r\nexport const MSG_PAGE = '/msg';\r\nexport const SUMMARY_PAGE = '/summary';\r\nexport const LOGIN_PAGE = '/login';\r\nexport const LOGOUT = '/logout';\r\n","import {logOn} from \"../services/axios-service\";\r\n\r\nexport const LOGON_ERROR = 'LOGON_ERROR'\r\nexport const logonError = msg => ({\r\n    type: LOGON_ERROR,\r\n    msg\r\n});\r\n\r\nexport const IS_LOGGING_ON = 'LOGGING_ON'\r\nexport const isLoggingOn = () => ({\r\n    type: IS_LOGGING_ON\r\n});\r\n\r\nexport const IS_LOGGED_ON = 'LOGGED_ON'\r\nexport const isLoggedOn = (user) => ({\r\n    type: IS_LOGGED_ON,\r\n    user: user\r\n});\r\n\r\nexport const logOnThunk = (username, password) => async dispatch => {\r\n    try {\r\n        dispatch(isLoggingOn());\r\n        const response = await logOn(username, password);\r\n        const user = response.data.restUser;\r\n        user.userName !== \"null\"\r\n          ? dispatch(isLoggedOn(user))\r\n          : dispatch(logonError(response.data.responseBody.body));\r\n    } catch (error) {\r\n        dispatch(logonError('Try again later'));\r\n    }\r\n};\r\n","import {logOut} from \"../services/axios-service\";\r\nimport {isLoading} from \"./loader-actions\";\r\n\r\nexport const RESET_IS_SHOW_MSG = 'RESET_IS_SHOW_MSG'\r\nexport const resetIsShowMsg = () => ({\r\n    type: RESET_IS_SHOW_MSG\r\n});\r\n\r\nexport const RESET_IS_ERROR = 'RESET_IS_ERROR'\r\nexport const resetIsError = () => ({\r\n    type: RESET_IS_ERROR\r\n});\r\n\r\nexport const SET_USER = 'SET_USER'\r\nexport const setUser = (user, loggedOn) => ({\r\n    type: SET_USER,\r\n    user,\r\n    loggedOn\r\n});\r\n\r\nexport const logOff = () => async dispatch => {\r\n    try{\r\n    const response = await logOut();\r\n        const user = response.data.restUser;\r\n    dispatch(logout(user));\r\n    }catch (e) {\r\n        \r\n    }\r\n}\r\n\r\nexport const LOGOUT = 'LOGOUT'\r\nexport const logout = (user) => ({\r\n    type: LOGOUT,\r\n    user\r\n});","import React, {useState} from 'react';\r\n\r\nimport PageSelector from \"../PageSelector\";\r\n\r\nconst LogOnPage = ({logOn, message, user, isShowMsg, resetIsShowMsg, isLoggingOn}) => {\r\n\r\n    const[username, setUsername] = useState('');\r\n    const[password, setPassword] = useState('');\r\n\r\n    const handleUsernameOnChange = (e) => {\r\n        setUsername(e.target.value);\r\n        resetIsShowMsg();\r\n    }\r\n\r\n    const handlePasswordOnChange = (e) => {\r\n        setPassword(e.target.value);\r\n        resetIsShowMsg()\r\n    }\r\n\r\n    const handleOnClick = () => {\r\n        logOn(username, password)\r\n    }\r\n\r\n    return (\r\n        <div className={\"page logOnPage\"}>\r\n\r\n            {isLoggingOn && <p className={\"loading\"}>Logging on....</p>}\r\n            {user.username !== undefined && <PageSelector user={user}/>}\r\n            {isShowMsg && <p className={\"message\"}>{message}</p>}\r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <p>Username: </p>\r\n                    </td>\r\n                    <td>\r\n                        <input type={\"text\"} className={\"logonInput\"} onChange={handleUsernameOnChange} value={username}/>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <p>Password: </p>\r\n                    </td>\r\n                    <td>\r\n                        <input type={\"password\"} className={\"logonInput\"} onChange={handlePasswordOnChange} value={password}/>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <button className={\"submitLogin\"} type={\"button\"} onClick={handleOnClick}>Logon</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LogOnPage;","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { isLoggingOn, logOnThunk } from \"../../actions/logon-actions\";\r\nimport { resetIsShowMsg } from \"../../actions/universal-actions\";\r\nimport PageSelector from \"../PageSelector\";\r\nimport LogOnPage from \"./LogOnPage\";\r\nimport MainContent from \"../layout/MainContent\";\r\nimport MainContentHeader from \"../layout/MainContentHeader\";\r\nimport MainContentContainer from \"../layout/MainContentConainer\";\r\nimport LeftContentContainer from \"../layout/LeftContentContainer\";\r\nimport LeftContentHeader from \"../layout/LeftContentHeader\";\r\nimport LeftContent from \"../layout/LeftContent\";\r\n\r\nconst LogOnPageContainer = ({\r\n  logOn,\r\n  message,\r\n  user,\r\n  isShowMsg,\r\n  resetIsShowMsg,\r\n  isLoggingOn\r\n}) => {\r\n  return (\r\n    <div className={\"pageContainer logOnPage\"}>\r\n      <header>\r\n        <h2 className={\"lightText\"}>PiCenter Logon</h2>\r\n      </header>\r\n      <div id=\"main\">\r\n        <section>\r\n          <LogOnPage\r\n            user={user}\r\n            logOn={logOn}\r\n            resetIsShowMsg={resetIsShowMsg}\r\n            isShowMsg={isShowMsg}\r\n            message={message}\r\n            isLoggingOn={isLoggingOn}\r\n          />\r\n        </section>\r\n          <nav><p className={\"lightText\"}>Sign in</p></nav>\r\n        <aside></aside>\r\n      </div>\r\n      <footer>\r\n        <a className={\"lightText\"} href={\"github.com/rjojjr\"}>Visit me on github</a>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  message: state.message,\r\n  user: state.user,\r\n  isShowMsg: state.isShowMsg,\r\n  isLoggingOn: state.isLoggingOn\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  logOn: logOnThunk,\r\n  resetIsShowMsg: resetIsShowMsg\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LogOnPageContainer);\r\n","import { loadSummary } from \"../services/axios-service\";\r\nimport { setUser } from \"./universal-actions\";\r\nimport * as debugConstants from \"../constants/debug-constants\";\r\n\r\nexport const SUMMARY_LOADING_ERROR = \"SUMMARY_LOADING_ERROR\";\r\nexport const summaryLoadingError = msg => ({\r\n  type: SUMMARY_LOADING_ERROR,\r\n  msg\r\n});\r\n\r\nexport const SUMMARY_LOADING = \"SUMMARY_LOADING\";\r\nexport const summaryLoading = () => ({\r\n  type: SUMMARY_LOADING\r\n});\r\n\r\nexport const SUMMARY_DONE_LOADING = \"SUMMARY_DONE_LOADING\";\r\nexport const summaryDoneLoading = () => ({\r\n  type: SUMMARY_DONE_LOADING\r\n});\r\n\r\nexport const SET_SUMMARY = \"SET_SUMMARY\";\r\nexport const setSummary = summary => ({\r\n  type: SET_SUMMARY,\r\n  summary\r\n});\r\n\r\nexport const SUMMARY_CAN_RENDER = \"SUMMARY_CAN_RENDER\";\r\nexport const summaryCanRender = (canRender) => ({\r\n  type: SUMMARY_CAN_RENDER,\r\n      canRender\r\n})\r\n\r\nexport const loadSummaryThunk = user => async dispatch => {\r\n  try {\r\n    dispatch(summaryLoading());\r\n    const summaryResponse = await loadSummary(user);\r\n    /*if (summaryResponse.data.responseBody.body === \"error\") {\r\n      dispatch(setUser({}, false));\r\n      return;\r\n    }*/\r\n    //const restUser = summaryResponse.data.restUser;\r\n    //setUser(restUser, true);\r\n    dispatch(setSummary(summaryResponse.data.summary));\r\n    dispatch(summaryDoneLoading());\r\n    dispatch(summaryCanRender(true));\r\n  } catch (error) {\r\n    dispatch(summaryCanRender(false));\r\n    if (\r\n      process.env.NODE_ENV === \"development\" &&\r\n      debugConstants.ALERT_DEBUG_THUNKS\r\n    ) {\r\n      alert(error);\r\n    }\r\n    dispatch(summaryLoadingError(\"Network error\"));\r\n  }\r\n};\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst SummaryTableRows = ({ summary, interval, index }) => {\r\n  return (\r\n    <Fragment>\r\n      <tr>\r\n        <td>{interval}</td>\r\n        <td>{summary.temps[index]}</td>\r\n        <td>{summary.humiditys[index]}</td>\r\n        <td>{summary.tempDevi[index]}</td>\r\n        <td>{summary.humidityDevi[index]}</td>\r\n      </tr>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default SummaryTableRows;\r\n","import React, { Fragment } from \"react\";\r\nimport SummaryTableRows from \"./SummaryTableRows\";\r\nimport { isLoading } from \"../../actions/loader-actions\";\r\n\r\nconst SummaryPage = ({ summary, user, isLoading, canRender }) => {\r\n  const intervals = [\r\n    \"Right Now\",\r\n    \"1 Hour\",\r\n    \"2 Hours\",\r\n    \"3 Hours\",\r\n    \"6 Hours\",\r\n    \"12 Hours\",\r\n    \"24 Hours\"\r\n  ];\r\n\r\n  return (\r\n    <div className={\"page summaryPage\"}>\r\n      {!isLoading && (\r\n        <div>\r\n          <h2>Sensor {summary.roomName} Summary</h2>\r\n          <table className={\"summaryTable\"}>\r\n            <tbody>\r\n              <tr>\r\n                <th>Interval</th>\r\n                <th>Temperature Average</th>\r\n                <th>Humidity Average</th>\r\n                <th>Sample Standard Deviation</th>\r\n              </tr>\r\n              <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n                <td><b>Temp</b></td>\r\n                <td><b>Humidity</b></td>\r\n\r\n                              </tr>\r\n                {intervals.map((interval, index) => {\r\n                  return (\r\n                      <SummaryTableRows\r\n                        interval={interval}\r\n                        index={index}\r\n                        summary={summary}\r\n                      />\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SummaryPage;\r\n","import React from \"react\";\r\n\r\nconst SummaryPageHeader = ({ selectSensor, summary, isLoading }) => {\r\n  return (\r\n    <div className={\"summaryHeader headerButtonContainer\"}>\r\n      <h3 >Sensors</h3>\r\n      {!isLoading && (\r\n         \r\n        <div>\r\n          \r\n          {summary.map((sum, index) => (\r\n            <button\r\n              key={index}\r\n              className={\"summarySensorSelector\"}\r\n              onClick={() => {\r\n                selectSensor(index);\r\n              }}\r\n            >\r\n              {sum.roomName}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SummaryPageHeader;\r\n","import React, { useState } from \"react\";\r\nimport SummaryPage from \"./SummaryPage\";\r\nimport SummaryPageHeader from \"./SummaryPageHeader\";\r\nimport LoadingView from \"../global/LoadingView\";\r\nimport LogOnPage from \"../login/LogOnPage\";\r\n\r\nconst SummaryPageContainer = ({\r\n  summary,\r\n  user,\r\n  isError,\r\n  errorMsg,\r\n  isLoading,\r\n  canLoad,\r\n  logOff\r\n}) => {\r\n  const [sensorIndex, setSensorIndex] = useState(0);\r\n\r\n  const selectSensor = index => {\r\n    setSensorIndex(index);\r\n  };\r\n\r\n  const showSummary = () => {\r\n    if (summary.length === 0) {\r\n      return \"\";\r\n    } else {\r\n      return summary[sensorIndex];\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={\"container summaryPageContainer\"}>\r\n      <LoadingView isLoading={isLoading} message={\"Loading..\"} />\r\n      {canLoad && !isLoading && (\r\n        <div>\r\n          <header>\r\n            <h2>PiCenter Sensor Summary</h2>\r\n            \r\n          </header>\r\n          <div id=\"main\">\r\n            <section>\r\n              <header >\r\n                <SummaryPageHeader\r\n                    isLoading={isLoading}\r\n                    summary={summary}\r\n                    selectSensor={selectSensor}\r\n                />\r\n                \r\n              </header>\r\n              <SummaryPage\r\n                canRender={canLoad}\r\n                isLoading={isLoading}\r\n                summary={showSummary()}\r\n              />\r\n            </section>\r\n            <nav>\r\n              <b>Summary</b>\r\n            </nav>\r\n            <aside>\r\n              <h4>Logged on as: {user.userName}</h4>\r\n              <button type={\"button\"} onClick={logOff}>\r\n                Logout\r\n              </button>\r\n            </aside>\r\n          </div>\r\n          <footer>\r\n            <a href={\"github.com/rjojjr\"}>Visit me on github</a>\r\n          </footer>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SummaryPageContainer;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { loadSummaryThunk } from \"../../actions/summary-actions\";\r\nimport SummaryPageContainer from \"./SummaryPageContainer\";\r\nimport {logOff} from '../../actions/universal-actions';\r\n\r\nconst SummaryPageLoader = ({\r\n  loadSummary,\r\n  summary,\r\n  user,\r\n  isLoading,\r\n  isError,\r\n  errorMsg,\r\n  canLoad,\r\n    logOff\r\n}) => {\r\n  /*useEffect(() => {\r\n    loadSummary(user);\r\n  }, [loadSummary]);*/\r\n\r\n  if (isLoading ){\r\n    loadSummary(user);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {isError && <p>An error has happened: {errorMsg}</p>}\r\n      <SummaryPageContainer\r\n        summary={summary}\r\n        user={user}\r\n        isLoading={isLoading}\r\n        canLoad={canLoad}\r\n        logOff={logOff}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  summary: state.summary,\r\n  user: state.user,\r\n  isLoading: state.isSummaryLoading,\r\n  isError: state.isSummaryError,\r\n  errorMsg: state.message,\r\n  canLoad: state.canRenderSummary\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  loadSummary: loadSummaryThunk,\r\n  logOff\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SummaryPageLoader);\r\n","import React from \"react\";\r\n\r\nimport * as constants from \"../constants/page-constants\";\r\n\r\nimport LoginPageContainer from './login/LogOnPageContainer';\r\nimport SummaryPageLoader from \"./summary/SummaryPageLoader\";\r\n\r\nconst PageSelector = ({user}) =>{\r\n    const page = user.page;\r\n    return(\r\n        <div className={\"pageSelector\"}>\r\n            {page === constants.LOGIN_PAGE && <LoginPageContainer />}\r\n            {page === constants.SUMMARY_PAGE && <SummaryPageLoader />}\r\n        </div>\r\n    )\r\n}\r\nexport default PageSelector","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PageSelector from \"./PageSelector\";\r\nimport * as constants from '../constants/page-constants';\r\nimport{ logOff} from '../actions/universal-actions';\r\n\r\nconst AppContainer = ({user}) => {\r\n\r\n    return (\r\n        //Put header here\r\n        <div className={\"appContainer\"}>\r\n            {user !== {} && user.userName !== 'null'  && user.userName !== undefined && <PageSelector user={user}/>}\r\n            {user === {} || user.userName === 'null'  && <PageSelector user={{page: constants.LOGIN_PAGE}}/>}\r\n        </div>\r\n        //Put footer here\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.user\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    logOff \r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    undefined\r\n)(AppContainer);","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport LoadingView from \"./global/LoadingView\";\r\n\r\nimport { loadAppThunk } from \"../actions/loader-actions\";\r\n\r\nimport AppContainer from \"./AppContainer\";\r\n\r\nconst InitialAppLoader = ({ isError, loadApp, errorMsg, isLoading }) => {\r\n  useEffect(() => {\r\n    loadApp();\r\n  }, [loadApp]);\r\n\r\n  return (\r\n    <div>\r\n      <LoadingView isLoading={isLoading} message={\"Loading...\"}/>\r\n      {/*//{isError && <p className=\"message\">{errorMsg}</p>}*/}\r\n      {/*{isShowMsg &&(\r\n                <p className=\"message\">{message}</p>\r\n            )}*/}\r\n      {!isLoading && <AppContainer />}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  //isError: state.isLoadingError,\r\n  //errorMsg: state.loadingErrorMsg,\r\n  isLoading: state.isLoading\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  loadApp: loadAppThunk\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InitialAppLoader);\r\n","import {load} from \"../services/axios-service\";\r\nimport {isLoggedOn} from \"./logon-actions\";\r\nimport * as debugConstants from '../constants/debug-constants'\r\nimport {setUser} from \"./universal-actions\";\r\n\r\nexport const IS_LOADING = 'IS_LOADING'\r\nexport const isLoading = () => ({\r\n    type: IS_LOADING\r\n});\r\n\r\nexport const IS_NOT_LOADING = 'IS_NOT_LOADING'\r\nexport const isNotLoading = () => ({\r\n    type: IS_NOT_LOADING\r\n});\r\n\r\nexport const LOGGED_ON = 'LOGGED_ON'\r\nexport const loggedOn = user => ({\r\n    type: LOGGED_ON,\r\n    user\r\n});\r\n\r\nexport const NOT_LOGGED_ON = 'NOT_LOGGED_ON'\r\nexport const notLoggedOn = msg => ({\r\n    type: NOT_LOGGED_ON,\r\n    msg\r\n});\r\n\r\nexport const LOADING_ERROR = 'LOADING_ERROR'\r\nexport const loadingError = msg => ({\r\n    type: LOADING_ERROR,\r\n    msg\r\n});\r\n\r\nexport const loadAppThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(isLoading());\r\n        const initiationResponse = await load();\r\n        const user = initiationResponse.data.restUser;\r\n\r\n        dispatch(setUser(user));\r\n        dispatch(isNotLoading());\r\n        return\r\n    } catch (error) {\r\n        if (process.env.NODE_ENV === 'development' && debugConstants.ALERT_DEBUG_THUNKS){\r\n            alert(error);\r\n        }\r\n        dispatch(loadingError('Network error'));\r\n    }\r\n};\r\n","import {\r\n    LOGGED_ON,\r\n    NOT_LOGGED_ON,\r\n    LOADING_ERROR,\r\n    IS_LOADING, IS_NOT_LOADING\r\n} from \"../actions/loader-actions\";\r\n\r\nimport {\r\n    IS_LOGGED_ON,\r\n    IS_LOGGING_ON,\r\n    LOGON_ERROR\r\n} from \"../actions/logon-actions\";\r\n\r\nimport {\r\n    SUMMARY_LOADING,\r\n    SET_SUMMARY,\r\n    SUMMARY_LOADING_ERROR, SUMMARY_DONE_LOADING, SUMMARY_CAN_RENDER\r\n} from \"../actions/summary-actions\";\r\n\r\nimport {\r\n    LOGOUT,\r\n    RESET_IS_ERROR,\r\n    RESET_IS_SHOW_MSG,\r\n    SET_USER\r\n} from \"../actions/universal-actions\";\r\n\r\n\r\nexport const initialState = () => ({\r\n    user: {},\r\n    isLoadingError: false,\r\n    loadingErrorMsg: '',\r\n    isLoading: false,\r\n    isError: false,\r\n    message: '',\r\n    isShowMsg: false,\r\n    errorMsg: '',\r\n    isLoggedOn: false,\r\n    isLoggingOn: false,\r\n    summary: [],\r\n    isSummaryLoading: true,\r\n    isSummaryError: false,\r\n    loaded: false,\r\n    canRenderSummary: false\r\n});\r\n\r\nexport default (state = initialState(), action = {type: undefined}) => {\r\n    switch (action.type) {\r\n        case RESET_IS_ERROR: {\r\n            return {\r\n                ...state,\r\n                isError: false,\r\n                errorMsg: ''\r\n            };\r\n        };\r\n        case RESET_IS_SHOW_MSG: {\r\n            return {\r\n                ...state,\r\n                isShowMsg: false,\r\n                message: ''\r\n            };\r\n        };\r\n        case IS_LOADING: {\r\n            return {\r\n                ...state,\r\n                user: {},\r\n                isLoading: true,\r\n                isShowMsg: false,\r\n                isError: false,\r\n                isLoggedOn: false,\r\n                loaded: true\r\n            };\r\n        };\r\n        case IS_NOT_LOADING: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isShowMsg: false,\r\n                isError: false,\r\n                loaded: true\r\n            };\r\n        };;\r\n        case NOT_LOGGED_ON: {\r\n            return {\r\n                ...state,\r\n                user: {},\r\n                isLoading: false,\r\n                isError: false,\r\n                isShowMsg: true,\r\n                message: action.msg,\r\n                isLoggedOn: false\r\n            };\r\n        }\r\n            ;\r\n        case LOADING_ERROR: {\r\n            return {\r\n                ...state,\r\n                user: {},\r\n                isLoading: false,\r\n                isLoadingError: true,\r\n                loadingErrorMsg: action.msg,\r\n                isLoggedOn: false\r\n            };\r\n        };\r\n        case LOGON_ERROR: {\r\n            return {\r\n                ...state,\r\n                user: {},\r\n                isLoggingOn: false,\r\n                isShowMsg: true,\r\n                message: action.msg,\r\n                isLoggedOn: false\r\n            };\r\n        };\r\n        case IS_LOGGING_ON: {\r\n            return {\r\n                ...state,\r\n                isLoggingOn: true,\r\n                isShowMsg: false,\r\n                isError: false,\r\n                isLoggedOn: false\r\n            };\r\n        };\r\n        case LOGGED_ON: {\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n                isLoggedOn: true\r\n            };\r\n        };\r\n        case SET_USER: {\r\n            const loggedOn = () => {\r\n                if(action.user.userName !== 'null') {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n                isLoggedOn: loggedOn()\r\n            };\r\n        };\r\n        case SET_SUMMARY: {\r\n            return {\r\n                ...state,\r\n                summary: action.summary,\r\n                isSummaryError: false\r\n            };\r\n        };\r\n        case SUMMARY_CAN_RENDER: {\r\n            return {\r\n                ...state,\r\n                canRenderSummary: action.canRender\r\n            };\r\n        };\r\n        case SUMMARY_LOADING_ERROR: {\r\n            return {\r\n                ...state,\r\n                isSummaryError: true,\r\n                isSummaryLoading: false,\r\n                isShowMsg: true,\r\n                message: action.msg\r\n            };\r\n        };\r\n        case SUMMARY_LOADING: {\r\n            return {\r\n                ...state,\r\n                isSummaryError: false,\r\n                isSummaryLoading: true,\r\n                isShowMsg: false,\r\n                canRenderSummary: false\r\n            };\r\n        };\r\n        case SUMMARY_DONE_LOADING: {\r\n            return {\r\n                ...state,\r\n                isSummaryError: false,\r\n                isSummaryLoading: false,\r\n                isShowMsg: false\r\n            };\r\n        };\r\n        case LOGOUT: {\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n                isLoadingError: false,\r\n                loadingErrorMsg: '',\r\n                isLoading: false,\r\n                isError: false,\r\n                message: '',\r\n                isShowMsg: false,\r\n                errorMsg: '',\r\n                isLoggedOn: false,\r\n                isLoggingOn: false,\r\n                summary: [],\r\n                isSummaryLoading: true,\r\n                isSummaryError: false,\r\n                loaded: false,\r\n                canRenderSummary: false\r\n            };\r\n        };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from \"react\";\r\nimport \"./App.css\";\r\nimport InitialAppLoader from \"./comps/InitialAppLoader\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport mainReducer from \"./reducers/main-reducer\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  mainReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nfunction App() {\r\n  return (\r\n      <Provider store={store}>\r\n        <InitialAppLoader />\r\n      </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.isError('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}